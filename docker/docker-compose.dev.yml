version: '3'

services:

  # AMQP RabbitMQ Broker
  rabbitmq:
    container_name: rabbitmq
    build: 
      context: ..
      dockerfile: docker/dev/rabbitmq/Dockerfile
    ports: 
      - 5672:5672
      - 15672:15672 # Management
    networks: 
      - backend

  # ======================================================
  # Databases

  mongodb-books:
    container_name: mongodb-books
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: books
      MONGO_INITDB_ROOT_PASSWORD: MongoMevn2021!
    ports: 
      - 27017:27017
    networks: 
      - db
  
  mongodb-users:
    container_name: mongodb-users
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: users
      MONGO_INITDB_ROOT_PASSWORD: MongoMevn2021!
    ports:
      - 27018:27017
    networks: 
      - db

  mongodb-preferences:
    container_name: mongodb-preferences
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: preferences
      MONGO_INITDB_ROOT_PASSWORD: MongoMevn2021!
    ports:
      - 27019:27017
    networks: 
      - db

  # ======================================================
  # Backend service(s)
  books:
    container_name: books
    build:
      context: ..
      dockerfile: docker/dev/all/Dockerfile
      args:
        name: book
    command: npm run dev
    volumes:
      - ../backend/book:/opt/book
    networks:
      - backend
      - db

  users:
    container_name: users
    build:
      context: ..
      dockerfile: docker/dev/all/Dockerfile
      args:
        name: user
    command: npm run dev
    volumes:
      - ../backend/user:/opt/user
    networks:
      - backend
      - db

  preferences:
    container_name: preferences
    build:
      context: ..
      dockerfile: docker/dev/all/Dockerfile
      args:
        name: preference
    command: npm run dev
    volumes:
      - ../backend/preference:/opt/preference
    networks:
      - backend
      - db

  notifications:
    container_name: notifications
    build:
      context: ..
      dockerfile: docker/dev/all/Dockerfile
      args:
        name: notification
    command: npm run dev
    volumes:
      - ../backend/notification:/opt/notification
    networks:
      - backend

  gateway: 
    container_name: gateway
    build: 
      context: ..
      dockerfile: docker/dev/all/Dockerfile
      args:
        name: gateway
    command: npm run dev
    volumes:
      - ../backend/gateway:/opt/gateway
    ports: 
      - 8080:8080
    networks: 
      - backend
      - frontend

  # ======================================================
  # Frontend service(s)
  frontend:
    container_name: frontend
    build:
      context: ..
      dockerfile: docker/dev/all/Dockerfile
      args:
        name: frontend
    command: npm run serve
    volumes:
      - ../frontend:/opt/frontend
    ports:
      - 8081:8081
    networks:
      - frontend

networks:
  backend:
  frontend:
  db: