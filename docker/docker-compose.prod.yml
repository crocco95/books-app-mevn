version: '3'

services:

  # AMQP RabbitMQ Broker
  rabbitmq:
    container_name: rabbitmq
    build: 
      context: ..
      dockerfile: docker/dev/rabbitmq/Dockerfile
    networks: 
      - backend

  # ======================================================
  # Databases

  mongodb-books:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: books
      MONGO_INITDB_ROOT_PASSWORD: MongoMevn2021!
    networks: 
      - db
  
  mongodb-users:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: users
      MONGO_INITDB_ROOT_PASSWORD: MongoMevn2021!
    networks: 
      - db

  mongodb-preferences:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: prefrences
      MONGO_INITDB_ROOT_PASSWORD: MongoMevn2021!
    networks: 
      - db

  # ======================================================
  # Backend service(s)

  books:
    container_name: books
    build:
      context: ..
      dockerfile: docker/prod/backend/Dockerfile
      args:
        name: book
    networks:
      - backend
      - db

  users:
    container_name: users
    build:
      context: ..
      dockerfile: docker/prod/backend/Dockerfile
      args:
        name: user
    networks:
      - backend
      - db

  preferences:
    container_name: preferences
    build:
      context: ..
      dockerfile: docker/prod/backend/Dockerfile
      args:
        name: preference
    networks:
      - backend
      - db

  gateway: 
    container_name: gateway
    build: 
      context: ..
      dockerfile: docker/prod/backend/Dockerfile
      args:
        name: gateway
    ports: 
      - 8080:8080
    networks: 
      - backend
      - frontend

  # ======================================================
  # Frontend service(s)
  
  frontend:
    container_name: frontend
    build:
      context: ..
      dockerfile: docker/prod/frontend/Dockerfile
    ports:
      - 8000:80
    networks:
      - frontend

networks:
  backend:
  frontend:
  db: